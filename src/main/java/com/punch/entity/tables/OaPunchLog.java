/*
 * This file is generated by jOOQ.
 */
package com.punch.entity.tables;


import com.punch.entity.Keys;
import com.punch.entity.Punch;
import com.punch.entity.tables.records.OaPunchLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OaPunchLog extends TableImpl<OaPunchLogRecord> {

    private static final long serialVersionUID = -474228627;

    /**
     * The reference instance of <code>punch.oa_punch_log</code>
     */
    public static final OaPunchLog OA_PUNCH_LOG = new OaPunchLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OaPunchLogRecord> getRecordType() {
        return OaPunchLogRecord.class;
    }

    /**
     * The column <code>punch.oa_punch_log.id</code>.
     */
    public final TableField<OaPunchLogRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>punch.oa_punch_log.user_id</code>.
     */
    public final TableField<OaPunchLogRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>punch.oa_punch_log.memo</code>.
     */
    public final TableField<OaPunchLogRecord, String> MEMO = createField(DSL.name("memo"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>punch.oa_punch_log.create_time</code>.
     */
    public final TableField<OaPunchLogRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>punch.oa_punch_log</code> table reference
     */
    public OaPunchLog() {
        this(DSL.name("oa_punch_log"), null);
    }

    /**
     * Create an aliased <code>punch.oa_punch_log</code> table reference
     */
    public OaPunchLog(String alias) {
        this(DSL.name(alias), OA_PUNCH_LOG);
    }

    /**
     * Create an aliased <code>punch.oa_punch_log</code> table reference
     */
    public OaPunchLog(Name alias) {
        this(alias, OA_PUNCH_LOG);
    }

    private OaPunchLog(Name alias, Table<OaPunchLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private OaPunchLog(Name alias, Table<OaPunchLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OaPunchLog(Table<O> child, ForeignKey<O, OaPunchLogRecord> key) {
        super(child, key, OA_PUNCH_LOG);
    }

    @Override
    public Schema getSchema() {
        return Punch.PUNCH;
    }

    @Override
    public UniqueKey<OaPunchLogRecord> getPrimaryKey() {
        return Keys.KEY_OA_PUNCH_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<OaPunchLogRecord>> getKeys() {
        return Arrays.<UniqueKey<OaPunchLogRecord>>asList(Keys.KEY_OA_PUNCH_LOG_PRIMARY);
    }

    @Override
    public OaPunchLog as(String alias) {
        return new OaPunchLog(DSL.name(alias), this);
    }

    @Override
    public OaPunchLog as(Name alias) {
        return new OaPunchLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OaPunchLog rename(String name) {
        return new OaPunchLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OaPunchLog rename(Name name) {
        return new OaPunchLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
